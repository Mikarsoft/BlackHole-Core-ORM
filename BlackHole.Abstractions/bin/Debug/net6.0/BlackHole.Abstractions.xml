<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BlackHole.Abstractions</name>
    </assembly>
    <members>
        <member name="T:BlackHole.Entities.PrimaryKey">
            <summary>
            Defines the primary key Column of the Entity
            and it is used only internally to the 'BlackHoleEntity' and 'BlackHoleEntityG'
            </summary>
        </member>
        <member name="T:BlackHole.Entities.TableDisplayName">
            <summary>
            
            </summary>
        </member>
        <member name="P:BlackHole.Entities.TableDisplayName.TableName">
            <summary>
            
            </summary>
        </member>
        <member name="M:BlackHole.Entities.TableDisplayName.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="T:BlackHole.Entities.Unique">
            <summary>
            Creates unique constraint using this column, alone or
            with other columns.
            </summary>
        </member>
        <member name="P:BlackHole.Entities.Unique.UniqueGroupId">
            <summary>
            The Identifier of the group 
            of the Unique columns combination
            </summary>
        </member>
        <member name="M:BlackHole.Entities.Unique.#ctor">
            <summary>
            Creates unique constraint using this column, alone or
            with other columns. 
            </summary>
        </member>
        <member name="M:BlackHole.Entities.Unique.#ctor(System.Int32)">
            <summary>
            Creates unique constraint using this column, alone or
            with other columns.
            </summary>
            <param name="groupId">The unique columns group Id</param>
        </member>
        <member name="T:BlackHole.Entities.UseActivator">
            <summary>
            Using this over a class, then the Column isActive of the entity will
            be used and instead of deleting the Entries, it will be setting them
            as inactive ,every time you preform a delete.
            Inactive entries are ignored by all commands
            and can only be accessed with the methods 
            'GetAllInactiveEntries' and 'DeleteInactiveEntryById'
            </summary>
        </member>
        <member name="F:BlackHole.Entities.UseActivator.useActivator">
            <summary>
            use inactive column as flag
            </summary>
        </member>
        <member name="T:BlackHole.Entities.VarCharSize">
            <summary>
            Specifies the Size of a Varchar column in the database
            The default size is 255
            </summary>
        </member>
        <member name="P:BlackHole.Entities.VarCharSize.Charlength">
            <summary>
            Character Length of the char column
            </summary>
        </member>
        <member name="M:BlackHole.Entities.VarCharSize.#ctor(System.Int32)">
            <summary>
            Specifies the Size of a Varchar column in the database
            The default size is 255
            </summary>
            <param name="Characters">The number of Characters. Varchar(n)</param>
        </member>
        <member name="M:BlackHole.Entities.VarCharSize.#ctor">
            <summary>
            Specifies the Size of a Varchar column in the database
            to the default size 255
            </summary>
        </member>
        <member name="T:BlackHole.Entities.ForeignKey">
            <summary>
            Sets Foreign Key for this Column
            </summary>
        </member>
        <member name="P:BlackHole.Entities.ForeignKey.TableName">
            <summary>
            Name of the Foreign Table
            </summary>
        </member>
        <member name="P:BlackHole.Entities.ForeignKey.Column">
            <summary>
            Name of the column
            </summary>
        </member>
        <member name="M:BlackHole.Entities.ForeignKey.#ctor(System.Type)">
            <summary>
            This Overload of the Constructor Sets by Default the corresponding column
            on the Primary Table as Id. You Can choose the Primary Table and
            if the Foreign Key is Nullable
            </summary>
            <param name="table">Type of the parent Table</param>
        </member>
        <member name="M:BlackHole.Entities.ForeignKey.#ctor(System.Type,System.String)">
            <summary>
            Set the Column as Foreign Key that points to specific Table and Column.
            </summary>
            <param name="table">Type of the other Table</param>
            <param name="columnName">Name of the other Table's Column</param>
        </member>
        <member name="T:BlackHole.Entities.BHOpenDto">
            <summary>
            Is Required to use Mapping on DTO, Views and Joins Functionality and 
            selecting specific columns of BHOpenEntities.
            </summary>
        </member>
        <member name="T:BlackHole.Entities.BHOpenEntity`1">
            <summary>
            Flexible Black Hole Entity with more options. The table in database is based on this.
            <para>It is Suggested for more advanced developers.</para>
            </summary>
        </member>
        <member name="M:BlackHole.Entities.BHOpenEntity`1.EntityOptions(BlackHole.Entities.EntityOptionsBuilder{`0})">
            <summary>
            Configuration method for the BHOpenEntity.
            <para><b>Important</b> => The result of this method is Required. All 'builder' methods will return a Settings Object.</para>
            </summary>
            <param name="builder">Entity's Settings Builder</param>
        </member>
        <member name="T:BlackHole.Entities.BlackHoleDto`1">
            <summary>
            Is Required to use Mapping on DTO, Views and Joins Functionality
            </summary>
            <typeparam name="G"></typeparam>
        </member>
        <member name="P:BlackHole.Entities.BlackHoleDto`1.Id">
            <summary>
            The Primary Key of the DTO
            </summary>
        </member>
        <member name="T:BlackHole.Entities.BlackHoleEntity`1">
            <summary>
            Black Hole Entity. The table in database is based on this
            </summary>
            <typeparam name="G"></typeparam>
        </member>
        <member name="P:BlackHole.Entities.BlackHoleEntity`1.Id">
            <summary>
            The Primary Key of the Entity
            </summary>
        </member>
        <member name="M:BlackHole.Entities.BlackHoleEntity`1.SetId(`0)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:BlackHole.Entities.IBHValueGenerator`1">
            <summary>
            Turns a Class into Value Generator, that it can be used
            on a BHOpenEntity, to automatically generate the value of
            a column on the InsertMethods.
            </summary>
        </member>
        <member name="M:BlackHole.Entities.IBHValueGenerator`1.GenerateValue">
            <summary>
            The method that is called on the insert and returns the
            generated value.
            </summary>
            <returns>Generated Value</returns>
        </member>
        <member name="T:BlackHole.Entities.EntityOptionsBuilder`1">
            <summary>
            Builder for Entity's Settings
            </summary>
        </member>
        <member name="M:BlackHole.Entities.EntityOptionsBuilder`1.SetPrimaryKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Sets property as Primary key.
            </summary>
            <typeparam name="tKey">Type of the property</typeparam>
            <param name="primaryKey">Property of the entity</param>
            <returns>Entity Settings Object</returns>
        </member>
        <member name="M:BlackHole.Entities.EntityOptionsBuilder`1.SetPrimaryKey(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}},System.Boolean)">
            <summary>
            Sets the property as Primary Key with auto increment.
            </summary>
            <param name="primaryKey">Property of the entity</param>
            <param name="HasAutoIncrement">Set to true for auto increment</param>
            <returns>Entity Settings Object</returns>
        </member>
        <member name="M:BlackHole.Entities.EntityOptionsBuilder`1.SetPrimaryKey(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}},System.Boolean)">
            <summary>
            Sets the property as Primary Key with auto increment.
            </summary>
            <param name="primaryKey">Property of the entity</param>
            <param name="HasAutoIncrement">Set to true for auto increment</param>
            <returns>Entity Settings Object</returns>
        </member>
        <member name="M:BlackHole.Entities.EntityOptionsBuilder`1.SetPrimaryKey(System.Linq.Expressions.Expression{System.Func{`0,System.Guid}},System.Boolean)">
            <summary>
            Sets the property as Primary Key and Sets autogenerated sequence of uuid on Postgres or SqlServer.
            <para><b>Important</b> => The Sequence of Uuid works only on Postgres and SqlServer. On any other database this setting will be ignored.</para>
            </summary>
            <param name="primaryKey">Property of the entity</param>
            <param name="HasSequence">Set to true for Uuid Sequence</param>
            <returns>Entity Settings Object</returns>
        </member>
        <member name="M:BlackHole.Entities.EntityOptionsBuilder`1.SetPrimaryKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},BlackHole.Entities.IBHValueGenerator{``0})">
            <summary>
            Sets property as Primary key and uses the Value Generator to create a new value on the Insert.
            </summary>
            <typeparam name="tKey"></typeparam>
            <param name="primaryKey">Property of the entity</param>
            <param name="valueGenerator">class that inherits from IBHValueGenerator</param>
            <returns>Entity Settings Object</returns>
        </member>
        <member name="M:BlackHole.Entities.EntityOptionsBuilder`1.NoPrimaryKey">
            <summary>
            Locks the entity with No Primary keys.
            <para><b>Important</b> => If you use 'CompositeKey' after this method, the Composite Key will be ignored.</para>
            </summary>
            <returns>Entity Settings Object</returns>
        </member>
        <member name="T:BlackHole.Entities.EntitySettings`1">
            <summary>
            Open Entity Settings Object
            </summary>
            <typeparam name="T">Type of Entity</typeparam>
        </member>
        <member name="P:BlackHole.Entities.EntitySettings`1.PKPropertyNames">
            <summary>
            List of Primary Keys of the Entity
            </summary>
        </member>
        <member name="P:BlackHole.Entities.EntitySettings`1.AutoGeneratedColumns">
            <summary>
            
            </summary>
        </member>
        <member name="P:BlackHole.Entities.EntitySettings`1.MainPrimaryKey">
            <summary>
            The first Primary Key
            </summary>
        </member>
        <member name="P:BlackHole.Entities.EntitySettings`1.HasAutoIncrement">
            <summary>
            If the first Primary Key has autoincrement this is set to true
            </summary>
        </member>
        <member name="M:BlackHole.Entities.EntitySettings`1.#ctor">
            <summary>
            A public constructor with Locked Primary Key Settings,
            to be used in BlackHole Core ORM Error Handling
            <para>DO NOT USE This Constructor. Use the Provided EntityOptionsBuilder to generate an unlocked
            instance of this class.</para>
            </summary>
        </member>
        <member name="T:BlackHole.Entities.PKExtensions">
            <summary>
            Entity Settings Extension methods.
            </summary>
        </member>
        <member name="M:BlackHole.Entities.PKExtensions.CompositeKey``2(BlackHole.Entities.EntitySettings{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Sets property as additional Primary key.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="tKey"></typeparam>
            <param name="settings"></param>
            <param name="primaryKey"></param>
            <returns>Entity Settings Object</returns>
        </member>
        <member name="M:BlackHole.Entities.PKExtensions.CompositeKey``2(BlackHole.Entities.EntitySettings{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},BlackHole.Entities.IBHValueGenerator{``1})">
            <summary>
            Sets property as additional Primary key and uses the Value Generator to create a new value on the Insert.
            </summary>
            <typeparam name="T">Type of Entity</typeparam>
            <typeparam name="tKey">Type of Property</typeparam>
            <param name="settings">Entity Settings Object</param>
            <param name="primaryKey">Property of the Entity</param>
            <param name="valueGenerator">class that inherits from IBHValueGenerator</param>
            <returns>Entity Settings Object</returns>
        </member>
        <member name="M:BlackHole.Entities.PKExtensions.AutoGenerate``2(BlackHole.Entities.EntitySettings{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},BlackHole.Entities.IBHValueGenerator{``1})">
            <summary>
            Binds a value Generator with the column and generated a new value on insert.
            </summary>
            <typeparam name="T">Type of Entity</typeparam>
            <typeparam name="tKey">Type of Property</typeparam>
            <param name="settings">Entity Settings Object</param>
            <param name="primaryKey">Property of the Entity</param>
            <param name="valueGenerator">class that inherits from IBHValueGenerator</param>
            <returns>Entity Settings Object</returns>
        </member>
        <member name="T:BlackHole.Entities.AutoGeneratedProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:BlackHole.Entities.AutoGeneratedProperty.PropertyName">
            <summary>
            
            </summary>
        </member>
        <member name="P:BlackHole.Entities.AutoGeneratedProperty.Autogenerated">
            <summary>
            
            </summary>
        </member>
        <member name="P:BlackHole.Entities.AutoGeneratedProperty.Generator">
            <summary>
            
            </summary>
        </member>
        <member name="T:BlackHole.Identifiers.BHEntityIdentifier">
            <summary>
            Identifier for Black Hole Entities.
            </summary>
        </member>
        <member name="T:BlackHole.Identifiers.BHDtoIdentifier">
            <summary>
            Identifier for BlackHole DTOs
            </summary>
        </member>
        <member name="T:BlackHole.Services.BlackHoleTransient">
            <summary>
            Make a service Inherit from this class
            to automatically get registered as Transient
            <para><b>Important</b> => If this service has also an Interface. The Name of the Interface, minus the first letter, must be
            contained into the Name of the Service class in order to be found.</para>
            </summary>
        </member>
        <member name="P:BlackHole.Services.BlackHoleTransient.ServiceType">
            <summary>
            The class of the Service
            </summary>
        </member>
        <member name="P:BlackHole.Services.BlackHoleTransient.InterfaceType">
            <summary>
            The interface of the Service
            </summary>
        </member>
        <member name="M:BlackHole.Services.BlackHoleTransient.#ctor">
            <summary>
            Make a service Inherit from this class
            to automatically get registered as Transient
            <para><b>Important</b> => If this service has also an Interface. The Name of the Interface, minus the first letter, must be
            contained into the Name of the Service class in order to be found.</para>
            </summary>
        </member>
        <member name="T:BlackHole.Services.BlackHoleScoped">
            <summary>
            Make a service Inherit from this class
            to automatically get registered as Scoped
            <para><b>Important</b> => If this service has also an Interface. The Name of the Interface, minus the first letter, must be
            contained into the Name of the Service class in order to be found.</para>
            </summary>
        </member>
        <member name="P:BlackHole.Services.BlackHoleScoped.ServiceType">
            <summary>
            The class of the service
            </summary>
        </member>
        <member name="P:BlackHole.Services.BlackHoleScoped.InterfaceType">
            <summary>
            The Interface of the service
            </summary>
        </member>
        <member name="M:BlackHole.Services.BlackHoleScoped.#ctor">
            <summary>
            Make a service Inherit from this class
            to automatically get registered as Scoped
            <para><b>Important</b> => If this service has also an Interface. The Name of the Interface, minus the first letter, must be
            contained into the Name of the Service class in order to be found.</para>
            </summary>
        </member>
        <member name="T:BlackHole.Services.BlackHoleSingleton">
            <summary>
            Make a service Inherit from this class
            to automatically get registered as Singleton
            <para><b>Important</b> => If this service has also an Interface. The Name of the Interface, minus the first letter, must be
            contained into the Name of the Service class in order to be found.</para>
            </summary>
        </member>
        <member name="P:BlackHole.Services.BlackHoleSingleton.ServiceType">
            <summary>
            The class of the Service
            </summary>
        </member>
        <member name="P:BlackHole.Services.BlackHoleSingleton.InterfaceType">
            <summary>
            The interface of the Service
            </summary>
        </member>
        <member name="M:BlackHole.Services.BlackHoleSingleton.#ctor">
            <summary>
            Make a service Inherit from this class
            to automatically get registered as Singleton
            <para><b>Important</b> => If this service has also an Interface. The Name of the Interface, minus the first letter, must be
            contained into the Name of the Service class in order to be found.</para>
            </summary>
        </member>
    </members>
</doc>
