
using System.Linq.Expressions;

namespace BlackHole.Entities
{
    /// <summary>
    /// 
    /// </summary>
    public class PKOptionsBuilder<T>
    {
        //internal PKOptionsBuilder()
        //{

        //}

        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="tKey"></typeparam>
        /// <param name="primaryKey"></param>
        public PKSettings<T> SetPrimaryKey<tKey>(Expression<Func<T,tKey>> primaryKey) where tKey : IComparable<tKey>
        {
            PKSettings<T> settings = new(false);
            if (primaryKey.Body is MemberExpression pkMember)
            {
                settings.PKSettingsList.Add(new PrimaryKeySettings { PropertyName = pkMember.Member.Name });
            }
            return settings;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="tKey"></typeparam>
        /// <param name="primaryKey"></param>
        /// <param name="valueGenerator"></param>
        public PKSettings<T> SetPrimaryKey<tKey>(Expression<Func<T, tKey>> primaryKey, IBHValueGenerator<tKey> valueGenerator) where tKey: IComparable<tKey> 
        {
            PKSettings<T> settings = new (false);
            if (primaryKey.Body is MemberExpression pkMember)
            {
                settings.PKSettingsList.Add(new PrimaryKeySettings { PropertyName = pkMember.Member.Name, Autogenerated = true, Generator = valueGenerator });
            }
            return settings;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public PKSettings<T> NoPrimaryKey()
        {
            return new PKSettings<T>(true);
        }
    }

    /// <summary>
    /// 
    /// </summary>
    /// <typeparam name="T"></typeparam>
    public class PKSettings<T>
    {
        internal  List<PrimaryKeySettings> PKSettingsList { get; set; } = new List<PrimaryKeySettings>();
        internal bool LockedPK { get; set; }
        internal PKSettings(bool lockedPK)
        {
            LockedPK = lockedPK;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public static class PKExtensions
    {
        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="tKey"></typeparam>
        /// <param name="settings"></param>
        /// <param name="primaryKey"></param>
        /// <returns></returns>
        public static PKSettings<T> CompositeKey<T, tKey>(this PKSettings<T> settings, Expression<Func<T, tKey>> primaryKey) where tKey : IComparable<tKey>
        {
            if (!settings.LockedPK)
            {
                if (primaryKey.Body is MemberExpression pkMember)
                {
                    settings.PKSettingsList.Add(new PrimaryKeySettings { PropertyName = pkMember.Member.Name });
                }
            }
            return settings;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="tKey"></typeparam>
        /// <param name="settings"></param>
        /// <param name="primaryKey"></param>
        /// <param name="valueGenerator"></param>
        /// <returns></returns>
        public static PKSettings<T> CompositeKey<T, tKey>(this PKSettings<T> settings, Expression<Func<T, tKey>> primaryKey, IBHValueGenerator<tKey> valueGenerator)
            where tKey : IComparable<tKey>
        {
            if (!settings.LockedPK)
            {
                if (primaryKey.Body is MemberExpression pkMember)
                {
                    settings.PKSettingsList.Add(new PrimaryKeySettings { PropertyName = pkMember.Member.Name, Autogenerated = true, Generator = valueGenerator });
                }
            }
            return settings;
        }
    }
}
