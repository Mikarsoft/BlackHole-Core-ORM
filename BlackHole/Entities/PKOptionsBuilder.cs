using BlackHole.Enums;
using BlackHole.Identifiers;
using BlackHole.Statics;
using System.Linq.Expressions;

namespace BlackHole.Entities
{
    /// <summary>
    /// 
    /// </summary>
    public class PKOptionsBuilder<T>
    {
        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="tKey"></typeparam>
        /// <param name="primaryKey"></param>
        public PKSettings<T> SetPrimaryKey<tKey>(Expression<Func<T,tKey>> primaryKey) where tKey : IComparable<tKey>
        {
            PKSettings<T> settings = new(false);
            if (primaryKey.Body is MemberExpression pkMember)
            {
                settings.PKPropertyNames.Add(pkMember.Member.Name);
                settings.MainPrimaryKey = pkMember.Member.Name;
            }
            return settings;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="primaryKey"></param>
        /// <param name="HasAutoIncrement"></param>
        /// <returns></returns>
        public PKSettings<T> SetPrimaryKey(Expression<Func<T, int>> primaryKey, bool HasAutoIncrement)
        {
            PKSettings<T> settings = new(false);
            if (primaryKey.Body is MemberExpression pkMember)
            {
                settings.PKPropertyNames.Add(pkMember.Member.Name);
                settings.MainPrimaryKey = pkMember.Member.Name;
                settings.HasAutoIncrement = HasAutoIncrement;
            }
            return settings;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="primaryKey"></param>
        /// <param name="HasSequence"></param>
        /// <returns></returns>
        public PKSettings<T> SetPrimaryKey(Expression<Func<T, Guid>> primaryKey, bool HasSequence)
        {
            PKSettings<T> settings = new(false);
            if (primaryKey.Body is MemberExpression pkMember)
            {
                settings.PKPropertyNames.Add(pkMember.Member.Name);
                settings.MainPrimaryKey = pkMember.Member.Name;
                if (DatabaseStatics.DatabaseType == BlackHoleSqlTypes.SqlServer || DatabaseStatics.DatabaseType == BlackHoleSqlTypes.Postgres)
                {
                    settings.HasAutoIncrement = HasSequence;
                }
            }
            return settings;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="tKey"></typeparam>
        /// <param name="primaryKey"></param>
        /// <param name="valueGenerator"></param>
        public PKSettings<T> SetPrimaryKey<tKey>(Expression<Func<T, tKey>> primaryKey, IBHValueGenerator<tKey> valueGenerator) where tKey: IComparable<tKey> 
        {
            PKSettings<T> settings = new (false);
            if (primaryKey.Body is MemberExpression pkMember)
            {
                settings.PKPropertyNames.Add(pkMember.Member.Name);
                settings.MainPrimaryKey = pkMember.Member.Name;
                settings.AutoGeneratedColumns.Add(new AutoGeneratedProperty { PropertyName = pkMember.Member.Name, Autogenerated = true, Generator = valueGenerator });
            }
            return settings;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public PKSettings<T> NoPrimaryKey()
        {
            return new PKSettings<T>(true);
        }
    }

    /// <summary>
    /// 
    /// </summary>
    /// <typeparam name="T"></typeparam>
    public class PKSettings<T>
    {
        /// <summary>
        /// 
        /// </summary>
        public List<string> PKPropertyNames { get; set; } = new();
        internal  List<AutoGeneratedProperty> AutoGeneratedColumns { get; set; } = new();
        internal string MainPrimaryKey { get; set; } = string.Empty;
        internal bool HasAutoIncrement { get; set; }
        internal bool LockedPK { get; set; }
        internal PKSettings(bool lockedPK)
        {
            LockedPK = lockedPK;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public static class PKExtensions
    {
        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="tKey"></typeparam>
        /// <param name="settings"></param>
        /// <param name="primaryKey"></param>
        /// <returns></returns>
        public static PKSettings<T> CompositeKey<T, tKey>(this PKSettings<T> settings, Expression<Func<T, tKey>> primaryKey) where tKey : IComparable<tKey>
        {
            if (!settings.LockedPK)
            {
                if (primaryKey.Body is MemberExpression pkMember)
                {
                    string? ExistingProp = settings.PKPropertyNames.FirstOrDefault(x => x == pkMember.Member.Name);
                    if (string.IsNullOrEmpty(ExistingProp))
                    {
                        settings.PKPropertyNames.Add(pkMember.Member.Name);
                    }
                }
            }
            return settings;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="tKey"></typeparam>
        /// <param name="settings"></param>
        /// <param name="primaryKey"></param>
        /// <param name="valueGenerator"></param>
        /// <returns></returns>
        public static PKSettings<T> CompositeKey<T, tKey>(this PKSettings<T> settings, Expression<Func<T, tKey>> primaryKey, IBHValueGenerator<tKey> valueGenerator)
            where tKey : IComparable<tKey>
        {
            if (!settings.LockedPK)
            {
                if (primaryKey.Body is MemberExpression pkMember)
                {
                    string? ExistingProp = settings.PKPropertyNames.FirstOrDefault(x=>x == pkMember.Member.Name);

                    if (string.IsNullOrEmpty(ExistingProp))
                    {
                        settings.PKPropertyNames.Add(pkMember.Member.Name);
                    }

                    AutoGeneratedProperty? ExistingGenerator = settings.AutoGeneratedColumns.FirstOrDefault(x=>x.PropertyName == pkMember.Member.Name);

                    if(ExistingGenerator != null)
                    {
                        settings.AutoGeneratedColumns.Remove(ExistingGenerator);
                    }

                    settings.AutoGeneratedColumns.Add(new AutoGeneratedProperty { PropertyName = pkMember.Member.Name, Autogenerated = true, Generator = valueGenerator });
                }
            }
            return settings;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="tKey"></typeparam>
        /// <param name="settings"></param>
        /// <param name="primaryKey"></param>
        /// <param name="valueGenerator"></param>
        /// <returns></returns>
        public static PKSettings<T> AutoGenerate<T, tKey>(this PKSettings<T> settings, Expression<Func<T, tKey>> primaryKey, IBHValueGenerator<tKey> valueGenerator)
            where tKey : IComparable<tKey>
        {
            if (primaryKey.Body is MemberExpression pkMember)
            {
                AutoGeneratedProperty? ExistingGenerator = settings.AutoGeneratedColumns.FirstOrDefault(x => x.PropertyName == pkMember.Member.Name);

                if (ExistingGenerator != null)
                {
                    settings.AutoGeneratedColumns.Remove(ExistingGenerator);
                }

                settings.AutoGeneratedColumns.Add(new AutoGeneratedProperty { PropertyName = pkMember.Member.Name, Autogenerated = true, Generator = valueGenerator });
            }
            
            return settings;
        }
    }
}
